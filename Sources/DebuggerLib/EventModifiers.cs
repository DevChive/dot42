using System;
using System.Text;

namespace Dot42.DebuggerLib
{
    /// <summary>
    /// Base class for event modifiers.
    /// </summary>
    public abstract class EventModifier
    {
        private readonly int kind;

        /// <summary>
        /// Default ctor
        /// </summary>
        protected EventModifier(int kind)
        {
            this.kind = kind;
        }

        /// <summary>
        /// Gets the size of this modifier in bytes (including the leading modKind byte).
        /// </summary>
        internal abstract int DataSize { get; }

        /// <summary>
        /// Write the modifier to the writer of a packet.
        /// In this method the kind byte is written override to write additional data.
        /// </summary>
        internal virtual void WriteTo(JdwpPacket.DataReaderWriter writer)
        {
            writer.SetByte((byte) kind);
        }
    }

    /// <summary>
    /// Limit the requested event to be reported at most once after a given number of occurrences. The event is not reported the first count - 1 times 
    /// this filter is reached. To request a one-off event, call this method with a count of 1.
    /// Once the count reaches 0, any subsequent filters in this request are applied. If none of those filters cause the event to be suppressed, 
    /// the event is reported. Otherwise, the event is not reported. In either case subsequent events are never reported for this request. 
    /// This modifier can be used with any event kind. 
    /// </summary>
    public sealed class EventCountModifier : EventModifier
    {
        private readonly int count;

        /// <summary>
        /// Default ctor
        /// </summary>
        public EventCountModifier(int count)
            : base(1)
        {
            this.count = count;
        }

        /// <summary>
        /// Gets the size of this modifier in bytes (including the leading modKind byte).
        /// </summary>
        internal override int DataSize
        {
            get { return 5; }
        }

        /// <summary>
        /// Write the modifier to the writer of a packet.
        /// In this method the kind byte is written override to write additional data.
        /// </summary>
        internal override void WriteTo(JdwpPacket.DataReaderWriter writer)
        {
            base.WriteTo(writer);
            writer.SetInt(count);
        }
    }

    /// <summary>
    /// Restricts reported events to those in the given thread. This modifier can be used with any event kind except for class unload.
    /// </summary>
    public sealed class EventThreadOnlyModifier : EventModifier
    {
        private readonly ThreadId threadId;

        /// <summary>
        /// Default ctor
        /// </summary>
        public EventThreadOnlyModifier(ThreadId threadId)
            : base(3)
        {
            this.threadId = threadId;
        }

        /// <summary>
        /// Gets the size of this modifier in bytes (including the leading modKind byte).
        /// </summary>
        internal override int DataSize
        {
            get { return 1 + threadId.Size; }
        }

        /// <summary>
        /// Write the modifier to the writer of a packet.
        /// In this method the kind byte is written override to write additional data.
        /// </summary>
        internal override void WriteTo(JdwpPacket.DataReaderWriter writer)
        {
            base.WriteTo(writer);
            threadId.WriteTo(writer);
        }
    }

    /// <summary>
    /// For class prepare events, restricts the events generated by this request to be the preparation of the given reference type and any subtypes. 
    /// For other events, restricts the events generated by this request to those whose location is in the given reference type or any of its subtypes. 
    /// An event will be generated for any location in a reference type that can be safely cast to the given reference type. This modifier can be 
    /// used with any event kind except class unload, thread start, and thread end.  
    /// </summary>
    public sealed class ClassOnlyModifier : EventModifier
    {
        private readonly ReferenceTypeId classId;

        /// <summary>
        /// Default ctor
        /// </summary>
        public ClassOnlyModifier(ReferenceTypeId classId)
            : base(4)
        {
            this.classId = classId;
        }

        /// <summary>
        /// Gets the size of this modifier in bytes (including the leading modKind byte).
        /// </summary>
        internal override int DataSize
        {
            get { return 1 + classId.Size; }
        }

        /// <summary>
        /// Write the modifier to the writer of a packet.
        /// In this method the kind byte is written override to write additional data.
        /// </summary>
        internal override void WriteTo(JdwpPacket.DataReaderWriter writer)
        {
            base.WriteTo(writer);
            classId.WriteTo(writer);
        }
    }

    /// <summary>
    /// Restricts reported events to those for classes whose name does not match the given 
    /// restricted regular expression. For class prepare events, the prepared class name 
    /// is matched. For class unload events, the unloaded class name is matched. For 
    /// monitor wait and waited events, the name of the class of the monitor object 
    /// is matched. For other events, the class name of the event's location is
    ///  matched. This modifier can be used with any event kind except thread 
    /// start and thread end.   
    /// </summary>
    public sealed class ClassExcludeModifier  : EventModifier
    {
        private readonly string  classPattern;

        /// <summary>
        /// Default ctor
        /// </summary>
        public ClassExcludeModifier(string classPattern)
            : base(6)
        {
            this.classPattern = classPattern;
        }

        /// <summary>
        /// Gets the size of this modifier in bytes (including the leading modKind byte).
        /// </summary>
        internal override int DataSize
        {
            get { return 1 + Encoding.UTF8.GetBytes(classPattern).Length; }
        }

        /// <summary>
        /// Write the modifier to the writer of a packet.
        /// In this method the kind byte is written override to write additional data.
        /// </summary>
        internal override void WriteTo(JdwpPacket.DataReaderWriter writer)
        {
            base.WriteTo(writer);
            writer.SetString(classPattern);
        }
    }

    /// <summary>
    /// Restricts reported events to those that occur at the given location. This modifier can be used with breakpoint, field access, 
    /// field modification, step, and exception event kinds.  
    /// </summary>
    public sealed class LocationOnlyModifier : EventModifier
    {
        private readonly Location location;

        /// <summary>
        /// Default ctor
        /// </summary>
        public LocationOnlyModifier(Location location)
            : base(7)
        {
            this.location = location;
        }

        /// <summary>
        /// Gets the size of this modifier in bytes (including the leading modKind byte).
        /// </summary>
        internal override int DataSize
        {
            get { return 1 + location.Size; }
        }

        /// <summary>
        /// Write the modifier to the writer of a packet.
        /// In this method the kind byte is written override to write additional data.
        /// </summary>
        internal override void WriteTo(JdwpPacket.DataReaderWriter writer)
        {
            base.WriteTo(writer);
            location.WriteTo(writer);
        }
    }

    /// <summary>
    /// Restricts reported exceptions by their class and whether they are caught or uncaught. This modifier can be used with exception event kinds only.  
    /// </summary>
    public sealed class ExceptionOnlyModifier : EventModifier
    {
        private readonly ReferenceTypeId exceptionClassId;
        private readonly bool caught;
        private readonly bool uncaught;

        /// <summary>
        /// Default ctor
        /// </summary>
        /// <param name="exceptionClassId">Exception to report. Null (0) means report exceptions of all types. A non-null type restricts the reported exception events to exceptions of the given type or any of its subtypes.</param>
        /// <param name="caught">Report caught exceptions </param>
        /// <param name="uncaught">Report uncaught exceptions. Note that it is not always possible to determine whether an exception is caught or uncaught at the time it is thrown. See the exception event catch location under composite events for more information.</param>
        public ExceptionOnlyModifier(ReferenceTypeId exceptionClassId, bool caught, bool uncaught)
            : base(8)
        {
            if (exceptionClassId == null)
                throw new ArgumentNullException("exceptionClassId");
            this.exceptionClassId = exceptionClassId;
            this.caught = caught;
            this.uncaught = uncaught;
        }

        /// <summary>
        /// Gets the size of this modifier in bytes (including the leading modKind byte).
        /// </summary>
        internal override int DataSize
        {
            get { return 1 + exceptionClassId.Size + 2; }
        }

        /// <summary>
        /// Write the modifier to the writer of a packet.
        /// In this method the kind byte is written override to write additional data.
        /// </summary>
        internal override void WriteTo(JdwpPacket.DataReaderWriter writer)
        {
            base.WriteTo(writer);
            exceptionClassId.WriteTo(writer);
            writer.SetBoolean(caught);
            writer.SetBoolean(uncaught);
        }
    }

    /// <summary>
    /// Restricts reported events to those that occur for a given field. This modifier can be used with field access and field modification event kinds only.  
    /// </summary>
    public sealed class FieldOnlyModifier : EventModifier
    {
        private readonly ReferenceTypeId classId;
        private readonly FieldId fieldId;

        /// <summary>
        /// Default ctor
        /// </summary>
        public FieldOnlyModifier(ReferenceTypeId classId, FieldId fieldId)
            : base(9)
        {
            this.classId = classId;
            this.fieldId = fieldId;
        }

        /// <summary>
        /// Gets the size of this modifier in bytes (including the leading modKind byte).
        /// </summary>
        internal override int DataSize
        {
            get { return 1 + classId.Size + fieldId.Size; }
        }

        /// <summary>
        /// Write the modifier to the writer of a packet.
        /// In this method the kind byte is written override to write additional data.
        /// </summary>
        internal override void WriteTo(JdwpPacket.DataReaderWriter writer)
        {
            base.WriteTo(writer);
            classId.WriteTo(writer);
            fieldId.WriteTo(writer);
        }
    }

    /// <summary>
    /// Restricts reported step events to those which satisfy depth and size constraints. This modifier can be used with step event kinds only.  
    /// </summary>
    public sealed class EventStepModifier : EventModifier
    {
        private readonly ThreadId threadId;
        private readonly Jdwp.StepSize stepSize;
        private readonly Jdwp.StepDepth stepDepth;

        /// <summary>
        /// Default ctor
        /// </summary>
        public EventStepModifier(ThreadId threadId, Jdwp.StepSize stepSize, Jdwp.StepDepth stepDepth)
            : base(10)
        {
            this.threadId = threadId;
            this.stepSize = stepSize;
            this.stepDepth = stepDepth;
        }

        /// <summary>
        /// Gets the size of this modifier in bytes (including the leading modKind byte).
        /// </summary>
        internal override int DataSize
        {
            get { return 9 + threadId.Size; }
        }

        /// <summary>
        /// Write the modifier to the writer of a packet.
        /// In this method the kind byte is written override to write additional data.
        /// </summary>
        internal override void WriteTo(JdwpPacket.DataReaderWriter writer)
        {
            base.WriteTo(writer);
            threadId.WriteTo(writer);
            writer.SetInt((int) stepSize);
            writer.SetInt((int) stepDepth);
        }
    }

    /// <summary>
    /// Restricts reported events to those whose active 'this' object is the given object. Match value is the null object for static methods. 
    /// This modifier can be used with any event kind except class prepare, class unload, thread start, and thread end. Introduced in JDWP version 1.4. 
    /// </summary>
    public sealed class InstanceOnlyModifier : EventModifier
    {
        private readonly ObjectId instanceId;

        /// <summary>
        /// Default ctor
        /// </summary>
        public InstanceOnlyModifier(ObjectId instanceId)
            : base(11)
        {
            this.instanceId = instanceId;
        }

        /// <summary>
        /// Gets the size of this modifier in bytes (including the leading modKind byte).
        /// </summary>
        internal override int DataSize
        {
            get { return 1 + instanceId.Size; }
        }

        /// <summary>
        /// Write the modifier to the writer of a packet.
        /// In this method the kind byte is written override to write additional data.
        /// </summary>
        internal override void WriteTo(JdwpPacket.DataReaderWriter writer)
        {
            base.WriteTo(writer);
            instanceId.WriteTo(writer);
        }
    }
}
