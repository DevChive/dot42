using Dot42.DexLib.Instructions;

namespace Dot42.CompilerLib.RL
{
    public enum RCode
    {
        Nop = OpCodes.Nop,
        Move = OpCodes.Move_16,
        Move_wide = OpCodes.Move_wide_16,
        Move_object = OpCodes.Move_object_16,
        Move_result = OpCodes.Move_result,
        Move_result_wide = OpCodes.Move_result_wide,
        Move_result_object = OpCodes.Move_result_object,
        Move_exception = OpCodes.Move_exception,
        Return_void = OpCodes.Return_void,
        Return = OpCodes.Return,
        Return_wide = OpCodes.Return_wide,
        Return_object = OpCodes.Return_object,
        Const = OpCodes.Const,
        Const_wide = OpCodes.Const_wide,
        Const_string = OpCodes.Const_string,
        Const_class = OpCodes.Const_class,
        Monitor_enter = OpCodes.Monitor_enter,
        Monitor_exit = OpCodes.Monitor_exit,
        Check_cast = OpCodes.Check_cast,
        Instance_of = OpCodes.Instance_of,
        Array_length = OpCodes.Array_length,
        New_instance = OpCodes.New_instance,
        New_array = OpCodes.New_array,
        Filled_new_array = OpCodes.Filled_new_array,
        Fill_array_data = OpCodes.Fill_array_data,
        Throw = OpCodes.Throw,
        Goto = OpCodes.Goto_32,
        Packed_switch = OpCodes.Packed_switch,
        Sparse_switch = OpCodes.Sparse_switch,
        Cmpl_float = OpCodes.Cmpl_float,
        Cmpg_float = OpCodes.Cmpg_float,
        Cmpl_double = OpCodes.Cmpl_double,
        Cmpg_double = OpCodes.Cmpg_double,
        Cmp_long = OpCodes.Cmp_long,
        If_eq = OpCodes.If_eq,
        If_ne = OpCodes.If_ne,
        If_lt = OpCodes.If_lt,
        If_ge = OpCodes.If_ge,
        If_gt = OpCodes.If_gt,
        If_le = OpCodes.If_le,
        If_eqz = OpCodes.If_eqz,
        If_nez = OpCodes.If_nez,
        If_ltz = OpCodes.If_ltz,
        If_gez = OpCodes.If_gez,
        If_gtz = OpCodes.If_gtz,
        If_lez = OpCodes.If_lez,
        Aget = 0x44,
        Aget_wide = 0x45,
        Aget_object = 0x46,
        Aget_boolean = 0x47,
        Aget_byte = 0x48,
        Aget_char = 0x49,
        Aget_short = 0x4a,
        Aput = 0x4b,
        Aput_wide = 0x4c,
        Aput_object = 0x4d,
        Aput_boolean = 0x4e,
        Aput_byte = 0x4f,
        Aput_char = 0x50,
        Aput_short = 0x51,
        Iget = 0x52,
        Iget_wide = 0x53,
        Iget_object = 0x54,
        Iget_boolean = 0x55,
        Iget_byte = 0x56,
        Iget_char = 0x57,
        Iget_short = 0x58,
        Iput = 0x59,
        Iput_wide = 0x5a,
        Iput_object = 0x5b,
        Iput_boolean = 0x5c,
        Iput_byte = 0x5d,
        Iput_char = 0x5e,
        Iput_short = 0x5f,
        Sget = 0x60,
        Sget_wide = 0x61,
        Sget_object = 0x62,
        Sget_boolean = 0x63,
        Sget_byte = 0x64,
        Sget_char = 0x65,
        Sget_short = 0x66,
        Sput = 0x67,
        Sput_wide = 0x68,
        Sput_object = 0x69,
        Sput_boolean = 0x6a,
        Sput_byte = 0x6b,
        Sput_char = 0x6c,
        Sput_short = 0x6d,
        Invoke_virtual = 0x6e,
        Invoke_super = 0x6f,
        Invoke_direct = 0x70,
        Invoke_static = 0x71,
        Invoke_interface = 0x72,
        Neg_int = 0x7b,
        Not_int = 0x7c,
        Neg_long = 0x7d,
        Not_long = 0x7e,
        Neg_float = 0x7f,
        Neg_double = 0x80,
        Int_to_long = 0x81,
        Int_to_float = 0x82,
        Int_to_double = 0x83,
        Long_to_int = 0x84,
        Long_to_float = 0x85,
        Long_to_double = 0x86,
        Float_to_int = 0x87,
        Float_to_long = 0x88,
        Float_to_double = 0x89,
        Double_to_int = 0x8a,
        Double_to_long = 0x8b,
        Double_to_float = 0x8c,
        Int_to_byte = 0x8d,
        Int_to_char = 0x8e,
        Int_to_short = 0x8f,
        Add_int = 0x90,
        Sub_int = 0x91,
        Mul_int = 0x92,
        Div_int = 0x93,
        Rem_int = 0x94,
        And_int = 0x95,
        Or_int = 0x96,
        Xor_int = 0x97,
        Shl_int = 0x98,
        Shr_int = 0x99,
        Ushr_int = 0x9a,
        Add_long = 0x9b,
        Sub_long = 0x9c,
        Mul_long = 0x9d,
        Div_long = 0x9e,
        Rem_long = 0x9f,
        And_long = 0xa0,
        Or_long = 0xa1,
        Xor_long = 0xa2,
        Shl_long = 0xa3,
        Shr_long = 0xa4,
        Ushr_long = 0xa5,
        Add_float = 0xa6,
        Sub_float = 0xa7,
        Mul_float = 0xa8,
        Div_float = 0xa9,
        Rem_float = 0xaa,
        Add_double = 0xab,
        Sub_double = 0xac,
        Mul_double = 0xad,
        Div_double = 0xae,
        Rem_double = 0xaf,
        Add_int_2addr = 0xb0,
        Sub_int_2addr = 0xb1,
        Mul_int_2addr = 0xb2,
        Div_int_2addr = 0xb3,
        Rem_int_2addr = 0xb4,
        And_int_2addr = 0xb5,
        Or_int_2addr = 0xb6,
        Xor_int_2addr = 0xb7,
        Shl_int_2addr = 0xb8,
        Shr_int_2addr = 0xb9,
        Ushr_int_2addr = 0xba,
        Add_long_2addr = 0xbb,
        Sub_long_2addr = 0xbc,
        Mul_long_2addr = 0xbd,
        Div_long_2addr = 0xbe,
        Rem_long_2addr = 0xbf,
        And_long_2addr = 0xc0,
        Or_long_2addr = 0xc1,
        Xor_long_2addr = 0xc2,
        Shl_long_2addr = 0xc3,
        Shr_long_2addr = 0xc4,
        Ushr_long_2addr = 0xc5,
        Add_float_2addr = 0xc6,
        Sub_float_2addr = 0xc7,
        Mul_float_2addr = 0xc8,
        Div_float_2addr = 0xc9,
        Rem_float_2addr = 0xca,
        Add_double_2addr = 0xcb,
        Sub_double_2addr = 0xcc,
        Mul_double_2addr = 0xcd,
        Div_double_2addr = 0xce,
        Rem_double_2addr = 0xcf,
        Add_int_lit = 0xd0,
        Rsub_int = 0xd1,
        Mul_int_lit = 0xd2,
        Div_int_lit = 0xd3,
        Rem_int_lit = 0xd4,
        And_int_lit = 0xd5,
        Or_int_lit = 0xd6,
        Xor_int_lit = 0xd7,

        // Specials
        Leave = 0x1001,
    }
}
